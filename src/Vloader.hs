{-# LANGUAGE BlockArguments #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-incomplete-patterns #-}

module Vloader where

import Control.Exception (try)
import Data.List (intercalate, isSuffixOf)
import Data.String (IsString (fromString))
import Data.Text (Text, pack, replace, splitOn, stripSuffix, unpack)
import Data.Text.Lazy (toStrict)
import Data.Yaml (FromJSON (parseJSON), ParseException, Value (Object), YamlException, decode, decodeFileEither, prettyPrintParseException, (.:))
import GHC.Base (IO (IO))
import GHC.IO.Exception (IOException (IOError))
import GHC.TypeLits (ErrorMessage)
import Options.Applicative (Parser, ParserInfo, fullDesc, header, help, helper, info, long, metavar, progDesc, short, strOption, value, (<**>))
import System.Directory (getDirectoryContents, getHomeDirectory)
import System.FilePath ()
import System.IO ()
import Text.Termcolor (format)
import qualified Text.Termcolor.Foreground as F
import Text.Termcolor.Style (bold)

data ModConfig = ModConfig
  { modPath :: String,
    resFile :: String,
    modules :: [String]
  }
  deriving (Show)

type ModName = String

instance FromJSON ModConfig where
  parseJSON (Object o) =
    ModConfig
      <$> o .: "mod_path"
      <*> o .: "res_file"
      <*> o .: "modules"
  parseJSON _ = error "Error Parsing Config file "

newtype Config = Config
  { confFile :: String
  }

config :: Parser Config
config =
  Config
    <$> strOption
      ( long "cfg"
          <> value "~/.config/vmod/vmod.yml"
          <> metavar "CFG_FILE"
          <> help "provide full path to the config file"
      )

getOpts :: ParserInfo Config
getOpts =
  info
    (config <**> helper)
    ( fullDesc
        <> progDesc "VmodLoader is used to bundle lua modules"
        <> header "V Mod Loader -Lua Module Bundler"
    )

border :: [Char]
border = concat $ replicate 30 "="

getMods :: FilePath -> String -> IO String
getMods modPath modName = do
  let modPrefix = getModPrefix modPath
  putStr $ "ModPrefix : " ++ modPrefix
  dirFiles <- try . getDirectoryContents $ modPath ++ "/" ++ modName :: IO (Either IOError [FilePath])
  case dirFiles of
    Right mods -> return $modgen modPrefix modName mods
    Left err -> "" <$ (putStrLn . format . bold . F.red . read $("\nError parsing Module : " ++ modName ++ "\n>> [Error]: " ++ show err ++ "\n"))

modgen :: String -> String -> [FilePath] -> String
modgen modPrefix modName dirFiles =
  let modFiles = filter (isSuffixOf ".lua") dirFiles
      header = ["-- " ++ border, "--    MOD : " ++ modName, "-- " ++ border]
      luaMods = map (\mod -> "require(\"" ++ modPrefix ++ modName ++ "." ++ fromMaybeMod (sanitizeLua mod) ++ "\")") modFiles
      luaRes = header ++ luaMods
   in intercalate "\n" luaRes

writeMods :: [ModName] -> String -> IO ()
writeMods luaMods resFile =
  writeFile (resFile ++ ".lua") $intercalate "\n" $banner ++ luaMods
  where
    banner = ["-- " ++ border, "-- GENERATED BY V MOD LOADER : )", "-- " ++ border ++ "\n\n"]

getModPrefix :: FilePath -> String
getModPrefix modPath =
  let paths = map unpack $splitOn (pack "/") (pack modPath)
      fetchPrefix :: [String] -> Bool -> String
      fetchPrefix [] False = ""
      fetchPrefix (x : xs) False
        | x == "lua" = fetchPrefix xs True
        | otherwise = fetchPrefix xs False
      fetchPrefix (x : xs) True = intercalate "" $x : map ("." ++) xs ++ ["."]
   in fetchPrefix paths False

getConfig :: FilePath -> IO ModConfig
getConfig confFile = do
  home <- getHomeDirectory
  file <- decodeFileEither (replaceHome home confFile) :: IO (Either ParseException ModConfig)
  case file of
    Left err -> error $ " ** Config Error.\n>> Ensure that the config is in the specified directory \n\n [Error] : \n  >>" ++ prettyPrintParseException err
    Right modConf -> return modConf

sanitizePath :: ModConfig -> Maybe ModConfig
sanitizePath ModConfig {modPath, resFile, modules} =
  do
    let mdP
          | last modPath == '/' = init modPath
          | otherwise = modPath
        resF
          | ".lua" `isSuffixOf` resFile = sanitizeLua resFile
          | otherwise = Just resFile
    resF >>= (\res -> Just $ ModConfig mdP res modules)

sanitizeLua :: String -> Maybe ModName
sanitizeLua modFile = unpack <$> stripSuffix ".lua" (fromString modFile)

replaceHome :: FilePath -> FilePath -> FilePath
replaceHome home confPath =
  unpack $replace "~" homeFile confFile
  where
    [homeFile, confFile] = fromString <$> [home, confPath]

fromMaybeMod :: Maybe ModName -> ModName
fromMaybeMod = \case
  Just mod -> mod
  Nothing -> error "Unable to remove lua extension "

fromMaybeConfig :: Maybe ModConfig -> ModConfig
fromMaybeConfig = \case
  Just mod -> mod
  Nothing -> error "Unable to parse Config .Please Ensure that the config contains required fields\n"
